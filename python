from flask import Flask, jsonify, request
from flask_jwt_extended import JWTManager, jwt_required, create_access_token, get_jwt_identity

app = Flask(__name__)
app.config['JWT_SECRET_KEY'] = 'super-secret'  # Tokens JWT
jwt = JWTManager(app)

# Rota para autenticação e obtenção do token JWT
@app.route('/login', methods=['POST'])
def login():
    # Aqui você autenticaria o usuário, por simplicidade vamos usar credenciais fixas
    username = request.json.get('username', None)
    password = request.json.get('password', None)
    
    # Verificação simples, em uma aplicação real isso seria feito de forma mais segura
    if username == 'user' and password == 'password':
        access_token = create_access_token(identity=username)
        return jsonify(access_token=access_token), 200
    else:
        return jsonify({"msg": "Invalid username or password"}), 401

# Rota protegida para operações matemáticas
@app.route('/calculate', methods=['POST'])
@jwt_required()
def calculate():
    # Obtém o identificador do usuário a partir do token JWT
    current_user = get_jwt_identity()
    
    # Recebe os dados da requisição
    data = request.json
    value1 = data['value1']
    value2 = data['value2']
    operation = data['operation']
    
    # Realiza a operação desejada
    if operation == 'sum':
        result = value1 + value2
    elif operation == 'subtract':
        result = value1 - value2
    elif operation == 'multiply':
        result = value1 * value2
    elif operation == 'divide':
        if value2 != 0:
            result = value1 / value2
        else:
            return jsonify({"msg": "Division by zero"}), 400
    else:
        return jsonify({"msg": "Invalid operation"}), 400
    
    # Retorna o resultado da operação
    return jsonify({"result": result}), 200

if __name__ == '__main__':
    app.run(debug=True)
